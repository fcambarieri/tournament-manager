package tournament.managerimport org.springframework.security.access.annotation.Securedimport static org.springframework.http.HttpStatus.*import grails.converters.JSON;import grails.transaction.Transactionalimport org.springframework.security.access.annotation.Secured@Transactional(readOnly = true)@Secured("hasRole('ROLE_USER')")class CombatWeightController extends AbstractController{    static allowedMethods = [save: "POST", update: "PUT", delete: "DELETE"]    def index(Integer max) {        params.max = Math.min(max ?: 10, 100)        def combatWeightInstanceList = CombatWeight.list(params)        //respond CombatWeight.list(params), model:[combatWeightInstanceCount: CombatWeight.count()]        def model =[combatWeightInstanceList:combatWeightInstanceList, combatWeightInstanceCount: combatWeightInstanceList.size()]        listFormView(model, params)    }    def show(CombatWeight combatWeightInstance) {        respond combatWeightInstance    }    def create() {        //respond new CombatWeight(params)		Long combatCategoryId = new Long(params.combatCategoryId)		def criteria = CombatWeight.createCriteria()		def weight = criteria.list { 			eq("combatCategory.id",combatCategoryId)			maxResults(1)			order("maxWeight", "desc")		}		params.minWeight = weight.size() > 0 ? weight.get(0).maxWeight + 1 : null        formView(["action":"save","combatCategoryId":params.combatCategoryId], params)    }    @Transactional    def save() {        /*if (combatWeightInstance == null) {            notFound()            return        }*/        CombatWeight combatWeightInstance = new CombatWeight(params)        combatWeightInstance.combatCategory = CombatCategory.get(params.combatCategoryId)        if (combatWeightInstance.hasErrors()) {            //respond combatWeightInstance.errors, view:'create'            formView(["action":"save","instance":combatWeightInstance], params)            return        }        if (!combatWeightInstance.save (flush:true)) {            formView(["action":"save","instance":combatWeightInstance], params)            return        }        flash.message = message(code: 'default.created.message', args: [message(code: 'combatWeightInstance.label', default: 'CombatWeight'), combatWeightInstance.id])		redirect view:"index", controller:"combatCategory"//        redirect view:"setting", controller:"tournament"        /*request.withFormat {            form multipartForm {                flash.message = message(code: 'default.created.message', args: [message(code: 'combatWeightInstance.label', default: 'CombatWeight'), combatWeightInstance.id])                redirect combatWeightInstance            }            '*' { respond combatWeightInstance, [status: CREATED] }        }*/    }    def edit(CombatWeight combatWeightInstance) {                editFormView(editModel(combatWeightInstance), params)    }    @Transactional    def update() {        CombatWeight combatWeightInstance = CombatWeight.get(params.id)        if (combatWeightInstance == null) {            notFound()            return        }        combatWeightInstance.minWeight = new Integer(params.minWeight)        combatWeightInstance.maxWeight = new Integer(params.maxWeight)        if (combatWeightInstance.hasErrors()) {            editFormView(editModel(combatWeightInstance), params)            return        }        if (!combatWeightInstance.save (flush:true)) {            editFormView(editModel(combatWeightInstance), params)        }        flash.message = message(code: 'default.updated.message', args: [message(code: 'CombatWeight.label', default: 'CombatWeight'), combatWeightInstance.id])        redirect view:"index", controller:"combatCategory"    }    @Transactional    def delete() {        CombatWeight combatWeightInstance = CombatWeight.get(params.id)        if (combatWeightInstance == null) {            notFound()            return        }        if (!combatWeightInstance.delete (flush:true)) {            flash.errorMessage = message(code: 'default.not.deleted.message', args: [message(code: 'CombatWeight.label', default: 'CombatWeight'), combatWeightInstance.id])        } else {            flash.message = message(code: 'default.deleted.message', args: [message(code: 'CombatWeight.label', default: 'CombatWeight'), combatWeightInstance.id])        }         redirect view:"index", controller:"combatCategory"    }    protected void notFound() {        flash.errorMessage = message(code: 'default.not.found.message', args: [message(code: 'combatWeightInstance.label', default: 'CombatWeight'), params.id])        redirect view:"index", controller:"combatCategory"    }	public Object getDomainInstance(Object params) {		return new CombatWeight(params)	}		def ajaxList() {		if (!params.combatCategoryId) {			render text:"{'error':'select category'}", status: 400		}		Long combatCategoryId = new Long(params.combatCategoryId)		def list = []		def weights = CombatWeight.where{combatCategory.id==combatCategoryId}		weights.each { w ->			list << ["id":w.id, "min_weight":w.minWeight, "max_weight":w.maxWeight, "description":w.toString()]		}				def json = list as JSON		render json	}}